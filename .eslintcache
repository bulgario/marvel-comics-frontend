[{"/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/index.js":"1","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/reportWebVitals.js":"2","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/App.js":"3","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/routes.js":"4","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/consts.js":"5","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/pages/Home/index.js":"6","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/auth.js":"7","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/pages/Login/index.js":"8","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/pages/SignUp/index.js":"9","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/pages/Search/index.js":"10","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/pages/User/Edit.js":"11","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/pages/User/edit.js":"12","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/services/api.js":"13","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/pages/User/favorite.js":"14","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/components/comicCard.js":"15","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/components/ComicCard.js":"16","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/pages/Comic/index.js":"17","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/components/CharacterCard.js":"18","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/pages/Character/index.js":"19"},{"size":380,"mtime":1607035038479,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1607026904947,"results":"22","hashOfConfig":"21"},{"size":250,"mtime":1607049853155,"results":"23","hashOfConfig":"21"},{"size":1425,"mtime":1607467974116,"results":"24","hashOfConfig":"21"},{"size":248,"mtime":1607467993467,"results":"25","hashOfConfig":"21"},{"size":112,"mtime":1607035684661,"results":"26","hashOfConfig":"21"},{"size":263,"mtime":1607381965362,"results":"27","hashOfConfig":"21"},{"size":3934,"mtime":1607465954764,"results":"28","hashOfConfig":"21"},{"size":5244,"mtime":1607303593763,"results":"29","hashOfConfig":"21"},{"size":6567,"mtime":1607467651618,"results":"30","hashOfConfig":"21"},{"size":3966,"mtime":1607357624940,"results":"31","hashOfConfig":"21"},{"size":5118,"mtime":1607380994267,"results":"32","hashOfConfig":"21"},{"size":348,"mtime":1607389018499,"results":"33","hashOfConfig":"21"},{"size":116,"mtime":1607444719365,"results":"34","hashOfConfig":"21"},{"size":99,"mtime":1607446750461,"results":"35","hashOfConfig":"21"},{"size":1804,"mtime":1607466151295,"results":"36","hashOfConfig":"21"},{"size":4026,"mtime":1607466266146,"results":"37","hashOfConfig":"21"},{"size":1720,"mtime":1607468059352,"results":"38","hashOfConfig":"21"},{"size":3266,"mtime":1607468641612,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"14b3mcm",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/index.js",[],["83","84"],"/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/reportWebVitals.js",[],"/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/App.js",[],"/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/routes.js",[],"/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/consts.js",[],"/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/pages/Home/index.js",[],"/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/auth.js",[],"/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/pages/Login/index.js",["85"],"import React, { useState } from \"react\"\nimport {\n  Button,\n  TextField,\n  Grid,\n  Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport marvelLoginIcon from \"../../assets/MarvelLogo.svg\";\n\nimport axios from \"axios\";\n\nimport { BASE_URL } from \"../../consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    height: 'auto',\n  },\n  button: {\n    marginBottom: theme.spacing(2),\n    color:\"white\",\n    background:\"#f44336\"\n  },\n  margin:{\n    marginTop: theme.spacing(2.5),\n  }\n}));\n\nconst Login = (props) => {\n  const classes = useStyles();\n  const USER_EMPTY = 'Email não preenchido!'\n  const PASS_EMPTY = 'Senha não preenchida!'\n  const CREDENTIALS_ERROR = 'Email ou senha incorretos!'\n  \n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [ emailNameError, setEmailNameError ] = useState(\"\");\n  const [ passwordNameError, setPasswordNameError ] = useState(\"\");\n  const [ loginSubmitted, setLoginSubmitted ] = useState(false);\n\n  const handleChange = (prop) => eve => {\n    const input = eve.target.value;\n    switch (prop) {\n      case 'email':\n        setEmail(input)\n        break;\n      case 'password':\n        setPassword(input)\n        break;\n    };\n  };\n\n  const handleSignIn = async () => {\n    if(email && password) {\n      setLoginSubmitted(true);\n      try {\n        await axios.post(`${BASE_URL}/user/login`, {\n          email: email,\n          senha: password\n        })\n        .then(res => {\n          const data = {\n            id: res.data.id,\n            token: res.data.token,\n            email: email\n          }\n          window.localStorage.setItem('data', JSON.stringify(data));\n        });\n          props.history.push('/search')\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    if (!email && !password) {\n      return (setEmailNameError(USER_EMPTY) && setPasswordNameError(PASS_EMPTY));\n    }\n    if(!email) {\n      return setEmailNameError(USER_EMPTY)\n    }\n  };\n\n  const getErrorMessage = () => {\n    if (loginSubmitted) {\n      return (\n        <>\n          <Typography variant={'body2'} gutterBottom color={'error'}>\n            {CREDENTIALS_ERROR}\n          </Typography>\n        </>\n      );\n    }\n    return null;\n  }\n\n  return (\n    <>\n      {getErrorMessage()}\n      <Grid  \n        container\n        spacing={0}\n        direction=\"column\"\n        alignItems=\"center\"\n        justify=\"center\"\n        style={{ minHeight: '100vh' }}\n      >\n      <Grid item xs={3}>\n        <img \n          src={marvelLoginIcon} \n          alt=\"Marvel Login Icon\" \n          height={200} \n          width={200} \n        />\n      </Grid>\n      <Grid item xs={3}>\n        <TextField\n          id={'email'}\n          error={!!emailNameError}\n          className={classes.margin}\n          variant={'outlined'}\n          fullWidth\n          autoFocus\n          label={'Email'}\n          value={email}\n          onChange={handleChange('email')}\n          helperText={emailNameError}\n        />\n      </Grid>\n      <Grid item xs={3}>\n        <TextField\n          id={'password'}\n          error={!!passwordNameError}\n          className={classes.margin}\n          variant={'outlined'}\n          fullWidth\n          label={'Senha'}\n          value={password}\n          onChange={handleChange('password')}\n          helperText={passwordNameError}\n        />\n      </Grid>\n      <br></br>\n      <Grid item xs={3}>\n        <Button\n          id=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.button}\n          fullWidth\n          onClick={(eve) => handleSignIn(eve)}\n        >\n          ENTRAR\n      </Button>\n      </Grid>\n      <Grid item xs={3}>\n      <Typography variant={'body2'}>\n            <a href=\"/SignUp\">Não tem conta? Registre-se</a>\n          </Typography>\n      </Grid>\n      </Grid>\n    </>\n  )\n};\n\nexport default Login;","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/pages/SignUp/index.js",["86","87"],"import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\n\nimport marvelLoginIcon from \"../../assets/MarvelLogo.svg\";\n\nimport { BASE_URL } from \"../../consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%',\n  },\n}));\n\nconst SignUp = (props) => {\n  const classes = useStyles();\n  const [ firstname, setFirstName ] = useState(\"\");\n  const [ lastname, setLastName ] = useState(\"\");\n  const [ email, setEmail ] = useState(\"\");\n  const [ password, setPassword ] = useState(\"\");\n  const [ success, setSuccess ] = useState(false);\n  const [ fail, setFailed ] = useState(false);\n\n  const handleChange = (prop) => eve => {\n    const input = eve.target.value;\n    switch (prop) {\n      case 'firstName':\n        setFirstName(input)\n        break;\n      case 'lastName':\n        setLastName(input)\n        break;\n      case 'email':\n        setEmail(input)\n        break;\n      case 'password':\n        setPassword(input)\n        break;\n    };\n  };\n\n  const handleSubmit = async (eve) => {\n    const delay = ms => new Promise(res => setTimeout(res, ms));\n    if (firstname, lastname, email, password) {\n      eve.preventDefault();\n      try {\n        await axios.post(`${BASE_URL}/cadastro`, {\n          nome: firstname,\n          sobrenome: lastname,\n          email: email,\n          senha: password\n        });\n        setSuccess(true);\n        await delay(2500);\n        props.history.push('/login');\n      } catch (error) {\n        setFailed(true);\n        await delay(2000);\n        console.log(error);\n      }\n      \n    }\n  };\n\n\n  const successMessage = () => (\n    <>\n      <Typography variant=\"h2\" gutterBottom>Conta Criada!</Typography>\n      <Typography variant=\"h5\" gutterBottom>Super Redirecionamento Rolando!</Typography>\n    </>\n  );\n\n  const tryAgain = () => (\n    <>\n      <Typography variant=\"h4\" gutterBottom>Algo aconteceu meu super heroi!</Typography>\n      <Typography variant=\"h5\" gutterBottom>Tente novamente!</Typography>\n    </>\n  )\n\n  const formRegister = () => (\n      <div className={classes.paper}>\n      <Typography component=\"h1\" variant=\"h5\">\n        Login\n      </Typography>\n      <form \n        className={classes.form} \n        noValidate\n        onSubmit={(eve) => handleSubmit(eve)}  \n      >\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              autoComplete=\"fname\"\n              name=\"firstName\"\n              variant=\"outlined\"\n              required\n              fullWidth\n              id=\"firstName\"\n              label=\"Nome\"\n              autoFocus\n              onChange={handleChange('firstName')}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              variant=\"outlined\"\n              required\n              fullWidth\n              id=\"lastName\"\n              label=\"Sobrenome\"\n              name=\"lastName\"\n              autoComplete=\"lname\"\n              onChange={handleChange('lastName')}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant=\"outlined\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email\"\n              name=\"email\"\n              autoComplete=\"email\"\n              onChange={handleChange('email')}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant=\"outlined\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Senha\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              onChange={handleChange('password')}\n            />\n          </Grid>\n        </Grid>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.submit}\n        >\n          Criar super conta\n        </Button>\n        <Grid container justify=\"flex-end\">\n          <Grid item>\n            <Link href=\"/login\" variant=\"body2\">\n              Já tem uma conta? Logue-se meu herói\n            </Link>\n          </Grid>\n        </Grid>\n      </form>\n    </div>\n  );\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <img \n        src={marvelLoginIcon} \n        alt=\"Marvel Login Icon\" \n        height={500} \n        width={500} \n      />\n      { fail && (\n        tryAgain()\n      ) }\n       {success ? (\n        successMessage()\n      ) : (\n        formRegister()\n      )}\n    </Container>\n  );\n};\n\nexport default withRouter(SignUp);\n","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/pages/Search/index.js",[],"/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/pages/User/Edit.js",["88","89","90"],"/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/pages/User/edit.js",["91","92","93","94"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport api from \"../../services/api\";\nimport { BASE_URL } from \"../../consts\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { TextField, Grid, Button } from \"@material-ui/core\";\n\nimport MarvelLogo from \"../../assets/MarvelLogo.svg\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n    button: {\n      marginBottom: theme.spacing(2),\n      color: \"white\",\n      background: \"#f44336\",\n    },\n  },\n}));\n\nconst User = () => {\n  const classes = useStyles();\n  const [userid, setUserId] = useState();\n  const [email, setUserEmail] = useState({});\n  const [id, setuserId] = useState();\n  const [nome, setUserName] = useState(\"\");\n  const [sobrenome, setUserSurname] = useState(\"\");\n  const [oldPass, setOldPass] = useState(\"\");\n  const [newPass, setNewPass] = useState(\"\");\n\n  const getUserId = async () => {\n    const { email } = JSON.parse(window.localStorage.getItem(\"data\"));\n    try {\n      await axios\n        .get(`${BASE_URL}/user`, {\n          params: {\n            email: email,\n          },\n        })\n        .then((res) => {\n          setUserId(res.data.data.id);\n        });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getUserData = async () => {\n    try {\n      await axios.get(`${BASE_URL}/user/${userid}`).then((res) => {\n        setUserEmail(res.data.email)\n        setuserId(res.data.id)\n        setUserName(res.data.nome)\n        setUserSurname(res.data.sobrenome)\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getUserId();\n  }, []);\n\n  useEffect(() => {\n    getUserData();\n  }, [userid]);\n\n  const handleSubmitForm = async (eve) => {\n    eve.preventDefault();\n    try {\n      await api.put(`/user/edit`, {\n        nome: nome,\n        sobrenome: sobrenome,\n        email: email,\n        senhaAntiga: oldPass,\n        senhaNova: newPass\n      });\n    } catch (error) {\n      console.log(\"Erro editar usuário\", error);\n    }\n  };\n\n  const handleChange = (prop) => (eve) => {\n    const input = eve.target.value;\n    switch (prop) {\n      case 'nome':\n        setUserName(input)\n        break;\n      case 'sobrenome':\n        setUserSurname(input)\n        break;\n      case 'senhaAntiga':\n        setOldPass(input)\n        break;\n      case 'senhaNova':\n        setNewPass(input)\n        break;\n    };\n  };\n\n  return (\n    <Grid\n      container\n      spacing={0}\n      direction=\"column\"\n      alignItems=\"center\"\n      justify=\"center\"\n      style={{ minHeight: \"100vh\" }}\n    >\n      <form className={classes.root} noValidate autoComplete=\"off\">\n      <Grid item>\n        <img \n          src={MarvelLogo} \n          alt=\"Marvel Login Icon\" \n          height={200} \n          width={200} \n        />\n      </Grid>\n        <Grid item xs={10}>\n          <TextField\n            required\n            id=\"outlined-required\"\n            label=\"Nome\"\n            className={classes.textField}\n            margin=\"normal\"\n            variant=\"outlined\"\n            value={nome}\n            onChange={handleChange(\"nome\")}\n          />\n        </Grid>\n        <Grid item xs={10}>\n          <TextField\n            required\n            id=\"outlined-required\"\n            label=\"Sobrenome\"\n            className={classes.textField}\n            margin=\"normal\"\n            variant=\"outlined\"\n            onChange={handleChange(\"nome\")}\n            value={sobrenome}\n            onChange={handleChange(\"sobrenome\")}\n          />\n        </Grid>\n        <Grid item xs={10}>\n          <TextField\n            required\n            id=\"outlined-required\"\n            label=\"Email\"\n            className={classes.textField}\n            margin=\"normal\"\n            variant=\"outlined\"\n            value={email}\n            onChange={handleChange(\"email\")}\n          />\n        </Grid>\n        <Grid item xs={10}>\n          <TextField\n            required\n            id=\"outlined-required\"\n            label=\"Senha antiga\"\n            className={classes.textField}\n            margin=\"normal\"\n            variant=\"outlined\"\n            value={oldPass}\n            onChange={handleChange(\"senhaAntiga\")}\n          />\n        </Grid>\n        <Grid item xs={10}>\n          <TextField\n            required\n            id=\"outlined-required\"\n            label=\"Senha nova\"\n            className={classes.textField}\n            margin=\"normal\"\n            variant=\"outlined\"\n            value={newPass}\n            onChange={handleChange(\"senhaNova\")}\n          />\n        </Grid>\n        <Grid item xs={10}>\n          <Button\n            id=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.button}\n            fullWidth\n            onClick={(eve) => handleSubmitForm(eve)}\n          >\n            Alterar dado\n          </Button>\n        </Grid>\n        <Grid item xs={10}>\n          <a\n            href=\"/search\"\n          >\n            Voltar\n          </a>\n        </Grid>\n      </form>\n    </Grid>\n  );\n};\n\nexport default User;\n","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/services/api.js",[],"/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/pages/User/favorite.js",[],"/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/components/comicCard.js",[],"/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/components/ComicCard.js",["95"],"import React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 310,\n    height: 800\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  media: {\n    height: 400,\n    paddingTop: '56.25%',\n  },\n});\n\nconst ComicCard = (props) => {\n  const classes = useStyles();\n  const { comic, pagination } = props;\n\n  const handleImage = (comic) => {\n    const { images, thumbnail } = comic;\n    return images[0] ? (\n      `${images[0].path}.${images[0].extension}`\n    ) : `${thumbnail.path}.${thumbnail.extension}`\n  }\n\n  const handleClickCard = (id) => {\n    props.history.push(`/comic/${id}`);\n  }\n\n  return (\n      <Card className={classes.root}>\n      <CardContent>\n        <Typography className={classes.pos} color=\"textPrimary\" gutterBottom>\n          {comic.title}\n        </Typography>\n        <Typography className={classes.title} color=\"textSecondary\">\n          {comic.series.name}\n        </Typography>\n      </CardContent>\n      <CardMedia\n        className={classes.media}\n        image={handleImage(comic)}\n        title={comic.title}\n      />\n      <CardActions>\n        <Button \n          size=\"small\" \n          color=\"primary\"\n          onClick={() => handleClickCard(comic.id)}\n        >\n          Saiba mais\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default ComicCard;","/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/pages/Comic/index.js",[],"/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/components/CharacterCard.js",["96"],"/Users/admin/Desktop/projects/stone-project/marvel-comics-frontend/src/pages/Character/index.js",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":44,"column":5,"nodeType":"103","messageId":"104","endLine":51,"endColumn":6},{"ruleId":"101","severity":1,"message":"102","line":47,"column":5,"nodeType":"103","messageId":"104","endLine":60,"endColumn":6},{"ruleId":"105","severity":1,"message":"106","line":65,"column":18,"nodeType":"107","messageId":"108","endLine":65,"endColumn":19},{"ruleId":"109","severity":1,"message":"110","line":62,"column":6,"nodeType":"111","endLine":62,"endColumn":14,"suggestions":"112"},{"ruleId":"113","severity":1,"message":"114","line":114,"column":13,"nodeType":"115","endLine":114,"endColumn":35},{"ruleId":"113","severity":1,"message":"114","line":115,"column":13,"nodeType":"115","endLine":115,"endColumn":49},{"ruleId":"116","severity":1,"message":"117","line":29,"column":10,"nodeType":"118","messageId":"119","endLine":29,"endColumn":12},{"ruleId":"109","severity":1,"message":"110","line":71,"column":6,"nodeType":"111","endLine":71,"endColumn":14,"suggestions":"120"},{"ruleId":"101","severity":1,"message":"102","line":90,"column":5,"nodeType":"103","messageId":"104","endLine":103,"endColumn":6},{"ruleId":"113","severity":1,"message":"114","line":146,"column":13,"nodeType":"115","endLine":146,"endColumn":49},{"ruleId":"116","severity":1,"message":"121","line":34,"column":18,"nodeType":"118","messageId":"119","endLine":34,"endColumn":28},{"ruleId":"116","severity":1,"message":"121","line":34,"column":22,"nodeType":"118","messageId":"119","endLine":34,"endColumn":32},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUserData'. Either include it or remove the dependency array.","ArrayExpression",["124"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar",["125"],"'pagination' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"126","fix":"128"},"Update the dependencies array to be: [getUserData, userid]",{"range":"129","text":"130"},{"range":"131","text":"130"},[1362,1370],"[getUserData, userid]",[1743,1751]]